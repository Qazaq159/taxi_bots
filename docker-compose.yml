services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    volumes:
      - .:/app
      - /var/log/shelek/:/app/logs/
    ports:
      - "80:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_worker:
    build: .
    command: bash -c 'cd taxi_bot; celery -A taxi_bot worker -l info'
    volumes:
      - .:/app
      - /var/log/shelek/:/app/logs/
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
    build: .
    command: bash -c 'cd taxi_bot; celery -A taxi_bot beat -l info'
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  driver_bot:
    build: .
    command: bash -c 'cd taxi_bot; python manage.py driver_bot'
    volumes:
      - .:/app
      - /var/log/shelek/:/app/logs/
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  passenger_bot:
    build: .
    command: bash -c 'cd taxi_bot; python manage.py passenger_bot'
    volumes:
      - .:/app
      - /var/log/shelek/:/app/logs/
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: